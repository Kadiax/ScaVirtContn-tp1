Documentation : https://putaindecode.io/articles/les-dockerfiles/
Documentation : https://spring.io/guides/gs/spring-boot-docker/
Développement – partie 1:

Conteneurisation – partie 1:
//dockerfile

//ex
FROM openjdk:13-jdk-alpine

ARG JAR_FILE=target/*.jar

COPY ${JAR_FILE} app.jar

ENTRYPOINT ["java","-jar","/app.jar"]




//build
docker build --tag productapp:1.0 .
ou
docker build -t productapp:1.0 .

//run
docker run --publish 8000:8080 --detach --name papp productapp:1.0
ou
docker run -p 8000:8080 productapp:1.0

//stop
docker rm --force pa

Conteneurisation – partie 2:
//Redis
stop application
//Récupération de l'image officiel du midleware Redis
docker pull redis

Développement – partie 2:
Ajouter un service Redis

start a redis instance
$ docker run --name some-redis -d redis
docker run --name some-redis -d redis redis-server --appendonly yes

-> host
docker network ls
docker network inspect bridge
==> ping entre les adresses ip des 2 conteneurs et remplacement du host dans le application.properties par l'adresse ip
du conteneur redis.

//docker compose
version: '3'
services:
  app:
    build: .
    ports:
      - "8000:8080"
    links:
      - "db:some-redis"
  db:
    image: "redis:alpine"
    hostname: some-redis
    ports:
      - "6379:6379"


docker-compose build

docker-compose up

docker-compose rm

docker-compose ps


// link
1° docker run --name some-redis -d redis /// /////////////////ou docker run --name redis -p 6379:6379 -d
2° docker build -t productapp:1.0 .
3° docker run --link some-redis -p 8000:8080 productapp:1.0



docker rm --force bb

docker run -t --link docker-mysql:mysql -p 10222:10222 book_manager_app

docker run --link redis -p 8080:8080 episen/backend:0.0.1


------------------------------>>>> docker run --link some-redis -p 8000:8080 productapp:1.0

TP2

TP: Mise à l’échelle avec les conteneurs et Docker-Compose
Ajouter des labels dans l’image API créée lors de la séance 1

#Labels
Labels allow you to do pretty interesting things with your Docker images. Here's a few basic use cases.
Image labels let you attach text based data to your Docker images. You can then filter your images based on these labels or look up this data in any custom scripts or tools you use.

Here’s a few examples on what you could use image labels for:

Store build information such as git tags and release dates
Credit images to 1 or more authors / maintainers
Display license information to quickly determine if it’s MIT, GPLv2, etc.
Organize your images by any criteria you can think of (there’s no limit)
One way to set them is by adding the LABEL instruction to your Dockerfile. The format is LABEL <key>=<value> and you can add more than 1.

Dockerfile example of adding 2 labels with 1 LABEL instruction:
LABEL version="1.0" maintainer="Nick Janetakis <nick.janetakis@gmail.com>"


Limit no-limit
il faut indiquer les limittes sinon l'application elle crache.

